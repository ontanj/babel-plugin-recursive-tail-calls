// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transform arrowFunction 1`] = `
"const arrowFunction = a => {
  _tailCallLoop: while (true) {
    if (a <= 0) return a;
    [a] = [a - 1];
    continue _tailCallLoop;
  }
};"
`;

exports[`transform base 1`] = `
"function base(a) {
  _tailCallLoop: while (true) {
    if (a <= 0) {
      return a;
    }
    [a] = [a - 1];
    continue _tailCallLoop;
  }
}"
`;

exports[`transform defaultArgActive 1`] = `
"function defaultArgActive(a, b = 0) {
  _tailCallLoop: while (true) {
    if (a < b) return a;
    [a, b] = [a - 1, 0];
    continue _tailCallLoop;
  }
}"
`;

exports[`transform defaultArgInactive 1`] = `
"function defaultArgInactive(a, b = 0) {
  _tailCallLoop: while (true) {
    if (a < b) return a;
    [a, b] = [a - 1, b + 1];
    continue _tailCallLoop;
  }
}"
`;

exports[`transform multipleArgs 1`] = `
"function multipleArgs(a, b) {
  _tailCallLoop: while (true) {
    if (a < b) return a;
    [a, b] = [a - 1, b + 1];
    continue _tailCallLoop;
  }
}"
`;

exports[`transform multipleReturns 1`] = `
"function multipleReturns(a, b, c) {
  _tailCallLoop: while (true) {
    if (a < 0) return a;
    if (b < 0) {
      const n = b + c;
      [a, b, c] = [n, b, c + 1];
      continue _tailCallLoop;
    }
    [a, b, c] = [a + 1, b + 1, c];
    continue _tailCallLoop;
  }
}"
`;

exports[`transform nestedStatements 1`] = `
"function nestedStatements(a, b) {
  _tailCallLoop: while (true) {
    if (a > b) {
      if (a > 0) {
        [a, b] = [a - 1, b];
        continue _tailCallLoop;
      }
      return a - b;
    }
    return a + b;
  }
}"
`;

exports[`transform undefinedArg 1`] = `
"function undefinedArg(a, b) {
  _tailCallLoop: while (true) {
    if (a < b) return a;
    [a, b] = [a - 1, undefined];
    continue _tailCallLoop;
  }
}"
`;
