// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transform combinedLogicalTernary 1`] = `
"function combinedLogicalTernary(a, b) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    const _symbol = Symbol();
    const _evaluation = a > 0 && _symbol;
    if (_evaluation === _symbol) {
      if (a > 10) {
        const _symbol2 = Symbol();
        const _evaluation2 = b || _symbol2;
        if (_evaluation2 === _symbol2) {
          [a, b] = [a + 1, (b + 1) % 5];
          _continueRecursion = true;
          continue _tailCallLoop;
        } else {
          return _evaluation2;
        }
      } else {
        [a, b] = [a + 1, (b + 2) % 2];
        _continueRecursion = true;
        continue _tailCallLoop;
      }
    } else {
      return _evaluation;
    }
  }
}"
`;

exports[`transform defaultParameter 1`] = `
"function defaultParameter(a, b = 0) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a < b) return a;
    [a, b = 0] = [a - 1];
    _continueRecursion = true;
    continue _tailCallLoop;
  }
}"
`;

exports[`transform exceedingArgs 1`] = `
"function exceedingArgs(a, b) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a > b) return a - b;
    [a, b] = [a + b, b, console.log("CALL")];
    _continueRecursion = true;
    continue _tailCallLoop;
  }
}"
`;

exports[`transform logicalAnd 1`] = `
"function logicalAnd(a, b) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a > 100) {
      return b;
    }
    const _symbol = Symbol();
    const _evaluation = a && _symbol;
    if (_evaluation === _symbol) {
      [a, b] = [a + 1, b + 1];
      _continueRecursion = true;
      continue _tailCallLoop;
    } else {
      return _evaluation;
    }
  }
}"
`;

exports[`transform logicalOr 1`] = `
"function logicalOr(a, b) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a > 100) {
      return b;
    }
    const _symbol = Symbol();
    const _evaluation = a || _symbol;
    if (_evaluation === _symbol) {
      [a, b] = [a + 1, b + 1];
      _continueRecursion = true;
      continue _tailCallLoop;
    } else {
      return _evaluation;
    }
  }
}"
`;

exports[`transform multipleReturns 1`] = `
"function multipleReturns(a, b, c) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a < 0) return a;
    if (b < 0) {
      const n = b + c;
      [a, b, c] = [n, b, c + 1];
      _continueRecursion = true;
      continue _tailCallLoop;
    }
    [a, b, c] = [a + 1, b + 1, c];
    _continueRecursion = true;
    continue _tailCallLoop;
  }
}"
`;

exports[`transform nestedStatements 1`] = `
"function nestedStatements(a, b) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a > b) {
      if (a > 0) {
        [a, b] = [a - 1, b];
        _continueRecursion = true;
        continue _tailCallLoop;
      }
      return a - b;
    }
    return a + b;
  }
}"
`;

exports[`transform noBlock 1`] = `
"function noBlock(a, b) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a < 10) {
      [a, b] = [a + b, b];
      _continueRecursion = true;
      continue _tailCallLoop;
    }
    return a;
  }
}"
`;

exports[`transform noReturn 1`] = `
"function noReturn(a, b) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a < 10) {
      [a, b] = [a + b, b];
      _continueRecursion = true;
      continue _tailCallLoop;
    } else if (a % 2 === 0) {
      return a;
    }
  }
}"
`;

exports[`transform nullishCoalescing 1`] = `
"function nullishCoalescing(a, b) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a !== null && a !== void 0) {
      return a;
    } else {
      [a, b] = [b > 100 ? b : null, b + 1];
      _continueRecursion = true;
      continue _tailCallLoop;
    }
  }
}"
`;

exports[`transform recursion 1`] = `
"function recursion(a, b) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a < b) return a;
    [a, b] = [a - 1, b + 1];
    _continueRecursion = true;
    continue _tailCallLoop;
  }
}"
`;

exports[`transform spread 1`] = `
"function spread(a, b, ...c) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a > b) return a;
    [a, b, ...c] = [b, ...c, a];
    _continueRecursion = true;
    continue _tailCallLoop;
  }
}"
`;

exports[`transform ternary 1`] = `
"function ternary(a, b, c) {
  let _continueRecursion = true;
  _tailCallLoop: while (_continueRecursion) {
    _continueRecursion = false;
    if (a > 10) {
      return c;
    } else {
      [a, b, c] = [a + b, b, c + a];
      _continueRecursion = true;
      continue _tailCallLoop;
    }
  }
}"
`;

exports[`transform wrapAnonymous1 1`] = `
"function wrapAnonymous1() {
  const arrowFunction = a => {
    let _continueRecursion2 = true;
    _tailCallLoop2: while (_continueRecursion2) {
      _continueRecursion2 = false;
      if (a <= 0) return a;
      [a] = [a - 1];
      _continueRecursion2 = true;
      continue _tailCallLoop2;
    }
  };
}"
`;

exports[`transform wrapAnonymous2 1`] = `
"function wrapAnonymous2() {
  const arrowFunctionNoBody = a => {
    let _continueRecursion2 = true;
    _tailCallLoop2: while (_continueRecursion2) {
      _continueRecursion2 = false;
      if (a <= 0) {
        return a;
      } else {
        [a] = [a - 1];
        _continueRecursion2 = true;
        continue _tailCallLoop2;
      }
    }
  };
}"
`;

exports[`transform wrapAnonymous3 1`] = `
"function wrapAnonymous3() {
  const functionExpression = function (a) {
    let _continueRecursion2 = true;
    _tailCallLoop2: while (_continueRecursion2) {
      _continueRecursion2 = false;
      if (a <= 0) return a;
      [a] = [a - 1];
      _continueRecursion2 = true;
      continue _tailCallLoop2;
    }
  };
}"
`;
